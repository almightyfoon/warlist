
import { SubList, ISubListView } from "../ccapi/sublist";
import { Rules, ArmyEntry, ThemeData, ListType, checkThemeAllowed } from "../ccapi/defines";
import { Entry, isCaster } from "../ccapi/entry";
import { Data } from "../ccapi/data";

import { DivBuilder } from "./builddiv";
import { CardViewer } from "./cardviewer";
import { Dialog } from "./dialog";
import { Button } from "./widgets";
import { entryStaticData } from "../ccapi/entrystatic";


export class SubListView implements ISubListView {
    rootNode: HTMLDivElement;
    armyHeader: HTMLElement;
    armySize: HTMLElement;
    armyCost: HTMLElement;
    themeTitle: HTMLElement;
    themeTitleInner: HTMLDivElement;
    themeButton: Button;
    themeNode: HTMLElement;
    themeListNode: HTMLElement;
    themeStatus: HTMLElement;
    listInner: HTMLElement;
    validationNode: HTMLElement;
    sl : SubList;

    /**
     * Recreate HTML version of the list from data.
     */
    rebuildList() : void {
        while( this.listInner.hasChildNodes() ) {
            this.listInner.removeChild(this.listInner.lastChild);
        }

        for( let i : number = 0; i < this.sl.armyEntries.length; i++ ) {
            this.listInner.appendChild(this.sl.armyEntries[i].viewData['cont']);
        }

    }

    /**
     * Decorate an ArmyEntry generated by a SubList.
     * @param ae ArmyEntry being decorated.
     * @param parent Parent of the decorated entry.
     * @param restore true if the operation is being done in restore mode.
     */
    decorateEntry(ae: ArmyEntry, parent: ArmyEntry, restore: boolean) : ArmyEntry[] {
        let div: HTMLDivElement = document.createElement("div");

        let ename: string = ae.entry.n;
        let midtxt: string = "";
        let pctxt: string = "";
        let endtxt: string = "";

        let span: HTMLDivElement = document.createElement("div");

        let innerSpan: HTMLSpanElement = document.createElement("span");

        innerSpan.onclick = () => { CardViewer.viewCard(ae.entry); };


        if( Data.modelUrls && Data.modelUrls[ae.entry.id]) {
            let anchor : HTMLAnchorElement = document.createElement("a");
            anchor.appendChild(document.createTextNode(ename));
            anchor.href = Data.modelUrls[ae.entry.id];
            anchor.target = "_blank";
            innerSpan.appendChild(anchor);
        }
        else {
            innerSpan.appendChild(document.createTextNode(ename));
        }

        span.appendChild(innerSpan);

        if (ae.entry.pr == 1 ) {
            innerSpan.className = "prerelease";
        }
        else if ( ae.entry.pr == 2 ) {
            innerSpan.className = "cid";
        }
        else if( ae.entry.pr == 3 ) {
            innerSpan.className = "narrative";
        }

        if (ae.entry.C == null) {
            // caster; intentional null op
        }
        else if (ae.entry.C.length > 2) {
            midtxt += " (" + (ae.choice + 1) + ")";
        }
        else if (ae.entry.C.length == 2) {
            if (ae.choice == 0) {
                midtxt += " (min)";
            }
            else {
                midtxt += " (max)";
            }
        }

        midtxt += " [";

        let midSpan: HTMLSpanElement = document.createElement("span");
        midSpan.appendChild(document.createTextNode(midtxt));
        span.appendChild(midSpan);

        if (ae.entry.bgp != null) {
            pctxt = "+" + ae.entry.bgp;
        }
        else {
            pctxt = "" + ae.cost;
        }

        let pcSpan: HTMLSpanElement = document.createElement("span");
        pcSpan.appendChild(document.createTextNode(pctxt));
        span.appendChild(pcSpan);

        if (ae.isModified()) {
            pcSpan.className = "otm";
        }
        else if( pctxt == "-1") {
            pctxt = "-";
            pcSpan.className = "obd";
        }

        endtxt += "]";

        let endSpan: HTMLSpanElement = document.createElement("span");
        endSpan.appendChild(document.createTextNode(endtxt));
        span.appendChild(endSpan);

        div.appendChild(span);

        ae.viewData['pcspan'] = pcSpan;

        let ale: ArmyEntry = null;

        if (parent != null) {
            this.attachControls(ae, div, parent, false);
            DivBuilder.adjustText(span, 263, 14);
        }
        else {
            ale = this.attachControls(ae, div, null, false);
            DivBuilder.adjustText(span, 280, 14);

            // todo: reimplement companions
            if (ae.entry.co != null) {
                let comp = Data.entries[ae.entry.co];

                if (comp != null) {
                    let divco = document.createElement("div");
                    let ndivco = document.createElement("div");
                    ndivco.appendChild(document.createTextNode(comp.n));
                    divco.appendChild(ndivco);


                    let uidco = this.sl.uid;
                    this.sl.uid++;

                    let aeco : ArmyEntry = new ArmyEntry(ae, comp, 0, uidco,
                        true, null, {});

                    ae.viewData['companionDiv'] = divco;

                    this.attachControls(aeco, divco, ae, true);
                    DivBuilder.adjustText(ndivco, 263, 14);
                }
            }

        }

        let ret: ArmyEntry = parent;

        return [ret, ale];

    }

    /**
     * Attach interactive controls to a HTMLDivElement associated with an ArmyEntry.
     * @param eldata ArmyEntry having controls attached to it.
     * @param div HTMLDivElement to attach controls to.
     * @param parent Parent ArmyEntry (if it exists).
     * @param companion true if the ArmyEntry is a companion.
     */
    attachControls(
        eldata: ArmyEntry,
        div: HTMLDivElement,
        parent: ArmyEntry,
        companion: boolean)
        : ArmyEntry {

        let icon: HTMLDivElement = null;
        let clip: HTMLDivElement = null;

        let removeFunc : () => void = null;


        let slist : SubList = this.sl;



        let typename : string = eldata.entry.typename;

        if( !typename ) {
            typename = "Mercenary/Minion " + Data._data.typenames[eldata.entry.t];
        }

        if (Data.typeDetails[typename]) {
            icon = document.createElement("div");
            icon.innerHTML = Data.typeDetails[typename].icon;

            div.insertBefore(icon, div.firstChild);
        }
        else {
            console.log(typename);
            console.log(Data.typeDetails);

            icon = document.createElement("div");
            icon.innerHTML = "settings";

            div.insertBefore(icon, div.firstChild);
        }

        if ((eldata.entry.lbg != null || isCaster(eldata.entry)
            || eldata.entry.at != null
            || eldata.entry.atf != null
            || eldata.entry.jm != null || eldata.entry.jr == 1)
            && parent == null
            && this.sl.pal.interactive) {
            clip = document.createElement("div");
            clip.className = "clip";

            div.appendChild(clip);
        }

        let x: HTMLDivElement = document.createElement("div");
        x.className = "xbut";

        if( !isCaster(eldata.entry) && eldata.entry.wu != 1 ) {
            let spec: HTMLDivElement = document.createElement("div");

            eldata.viewData["specbut"] = spec;

            spec.className = eldata.specialist ? "specbut specsel" : "specbut";

            if( !this.sl.pal.inADR() ) {
                spec.style.display = "none";
            }

            spec.onclick = (function(sb : HTMLDivElement, ae : ArmyEntry, slv : SubListView) {
                return function() {
                    if( !ae.specialist ) {
                        let specMax : number = 40;

                        if( slv.sl.pal.rules && slv.sl.pal.rules.listType 
                            && slv.sl.pal.rules.listType.forceSpecialists ) {
                                specMax = slv.sl.pal.rules.listType.forceSpecialists;
                        }

                        if( slv.sl.specialistPoints() + ae.listCost() > specMax ) {
                            return;
                        }
                    }

                    if( slv.sl.pal.current() != slv.sl ) {
                        return;
                    }

                    ae.specialist = !ae.specialist;

                    if( ae.specialist ) {
                        sb.className = "specbut specsel";
                    }
                    else {
                        sb.className = "specbut";
                    }

                    slv.sl.pal.aec.endChange();
                }
            })(spec, eldata, this);

            div.appendChild(spec);
        }



        if (parent != null) {
            div.className = "listattach lb";

            let hook: HTMLDivElement = document.createElement("div");
            hook.className = "hook";
            div.appendChild(hook);

            eldata.viewData["div"] = div;

            while( parent.viewData['cont'] != null && parent.viewData['cont'].childNodes.length > 1 ) {
                parent.viewData['cont'].removeChild(parent.viewData['cont'].lastChild);
            }

            if( parent.viewData['companionDiv'] ) {
                parent.viewData['cont'].appendChild(parent.viewData['companionDiv']);
            }

            for( let i : number = 0; i < parent.children.length; i++ ) {
                if( parent.viewData['cont']) {
                    parent.viewData['cont'].appendChild(parent.children[i].viewData['div']);
                }
                else {
                    console.log("Null container; this shouldn't happen");
                    console.log(eldata);
                    console.log(parent);
                    console.trace();
                }
            }

            if (companion) {
                return null;
            }

            if (this.sl.pal.interactive) {
                removeFunc = (function () {
                        let myEntry: Entry = eldata.entry;
                        let myDiv: HTMLDivElement = div;
                        let myCont: HTMLDivElement = parent.viewData['cont'];
                        let myUid: number = eldata.uid;
                        let myParent: number = parent.uid;
                        let myPC: number = eldata.cost;
                        let mySlist: SubList = slist;

                        return function (skipEndChange? : boolean) {
                            myCont.removeChild(myDiv);
                            mySlist.deleteAttachment(myEntry, myPC, myUid, myParent);

                            //console.log(skipEndChange);

                            if( !skipEndChange ) {
                                mySlist.pal.aec.endChange();
                            }
                        };
                    })();

                x.onclick = () => { removeFunc(); };
                eldata.remove = removeFunc;

                div.appendChild(x);

                let down: HTMLDivElement = document.createElement("div");
                down.className = "dbut";

                div.appendChild(down);

                let up: HTMLDivElement = document.createElement("div");
                up.className = "ubut";

                div.appendChild(up);

                if (div.parentElement != parent.viewData['cont']) {
                    alert("wtf");
                }

                up.onclick = (function () {
                    let myEntry = eldata.entry;
                    let myDiv = div;
                    let myCont = parent.viewData['cont'];
                    let myUid = eldata.uid;
                    let myParent = parent.uid;
                    let myPC = eldata.cost;
                    let mySlist: SubList = slist;
                    let myChoice: number = eldata.choice;
                    let mySpec: boolean = eldata.specialist;

                    return function () {
                        mySlist.moveAttachment(myEntry, myPC, myChoice, myDiv, myCont, myUid, myParent, false, mySpec);
                        mySlist.pal.aec.endChange();
                    };
                })();

                down.onclick = (function () {
                    let myEntry = eldata.entry;
                    let myDiv = div;
                    let myCont = parent.viewData['cont'];
                    let myUid = eldata.uid;
                    let myParent = parent.uid;
                    let myPC = eldata.cost;
                    let mySlist: SubList = slist;
                    let myChoice: number = eldata.choice;
                    let mySpec: boolean = eldata.specialist;

                    return function () {
                        mySlist.moveAttachment(myEntry, myPC, myChoice, myDiv, myCont, myUid,
                            myParent, true, mySpec);
                        mySlist.pal.aec.endChange();
                    };
                })();

                return null;
            }
        }
        else {
            div.className = "listentry lb";

            if (this.sl.pal.interactive) {
                removeFunc = (function () {
                    let myUid: number = eldata.uid;
                    let mySlist: SubList = slist;

                    return function (skipEndChange? : boolean) {
                        mySlist.deleteEntry(myUid);

                        //console.log(skipEndChange);

                        if( !skipEndChange ) {
                            mySlist.pal.aec.endChange();
                        }
                    };
                })();

                x.onclick = () => { removeFunc(); };

                div.appendChild(x);
            }

            let cont: HTMLDivElement = document.createElement("div");

            if (eldata.entry.v != null) {
                let vdiv: HTMLDivElement = document.createElement("div");
                vdiv.className = "cvl";
                vdiv.appendChild(document.createTextNode(eldata.entry.v));
                div.appendChild(vdiv);

                vdiv.onclick = () => { CardViewer.viewCard(eldata.entry); };


                div.className += " cvld";
                if (icon) {
                    icon.className = "cvlo1";
                }
                div.children[1].className = "cvlo2";
                x.className += " cvlo3";

                if (clip != null)
                    clip.className += " cvlo4";
            }

            if(icon && this.sl.inTheme() && this.sl.theme.isEntryRequired(eldata.entry)) {
                icon.className += " qualifying";
            }

            eldata.viewData["div"] = div;
            eldata.viewData["cont"] = cont;
            eldata.viewData["icon"] = icon;

            cont.appendChild(div);

            this.rebuildList();

            if (clip != null && this.sl.pal.interactive) {
                clip.onclick = (function () {
                    let myData: ArmyEntry = eldata;
                    //let myThis = aec;
                    let mySlist = slist;

                    return function () {
                        mySlist.pal.aec.attachUnit(myData, mySlist, true);
                    };

                })();
            }

            return eldata;
        }
    }





    endChange() : void {
        
        let adr : boolean = this.sl.pal.inADR();
        //console.log(adr);
        let live : boolean = this.sl == this.sl.pal.current() && this.sl.pal.interactive;

        for( let i : number = 0; i < this.sl.armyEntries.length; i++ ) {
            if( !isCaster(this.sl.armyEntries[i].entry)  ) {
                this.sl.armyEntries[i].viewData['pcspan'].innerText = "" +
                    this.sl.armyEntries[i].cost;

                if( this.sl.inTheme() ) {
                    let modified: boolean = this.sl.armyEntries[i].isModified();
                    this.sl.armyEntries[i].viewData['pcspan'].className =
                        modified ? "otm" : "";

                    if( this.sl.armyEntries[i].viewData["icon"] ) {
                        let className : string = 
                            this.sl.armyEntries[i].viewData["icon"].className;

                        if( modified ) {
                            if( className.indexOf("qualifying") != -1 ) {
                                this.sl.armyEntries[i].viewData["icon"].className
                                     = className.replace("qualifying", "freeCard");
                            }
                            else {
                                this.sl.armyEntries[i].viewData["icon"].className
                                    += " freeCard";
                            }
                        }
                        else {
                            if( className.indexOf("freeCard") != -1 ) {
                                let newStyle : string = "";

                                if( this.sl.theme.isEntryRequired(this.sl.armyEntries[i].entry)) {
                                    newStyle = "qualifying";
                                }
    
                                this.sl.armyEntries[i].viewData["icon"].className
                                     = className.replace("freeCard", newStyle);
                            }

                        }
                    }
                }
                else {
                    this.sl.armyEntries[i].viewData['pcspan'].className = "";
                }

                if( adr && this.sl.armyEntries[i].viewData["specbut"] ) {
                    this.sl.armyEntries[i].viewData["specbut"].style.display =
                        live || this.sl.armyEntries[i].specialist
                            ? "block" : "none";
                }
            }


            for( let j : number = 0; j < this.sl.armyEntries[i].children.length; j++ ) {
                this.sl.armyEntries[i].children[j].viewData['pcspan'].innerText = "" +
                    this.sl.armyEntries[i].children[j].cost;

                if( this.sl.inTheme() ) {
                    this.sl.armyEntries[i].children[j].viewData['pcspan'].className =
                        this.sl.armyEntries[i].children[j].isModified() ? "otm" : "";
                }
                else {
                    this.sl.armyEntries[i].children[j].viewData['pcspan'].className = "";
                }

                if( adr && this.sl.armyEntries[i].children[j].viewData["specbut"] ) {
                    this.sl.armyEntries[i].children[j].viewData["specbut"].style.display =
                        live || this.sl.armyEntries[i].children[j].specialist
                            ? "block" : "none";
                }

            }

        }

        this.updateThemeStatus();
    }

    deleteEntry(ae : ArmyEntry) : void {
        this.listInner.removeChild(ae.viewData['cont']);
    }

    updateButtons() : void {
        // fixme: disable correct buttons

        if( this.sl.pal.subLists.length > 1 ) {
            (<HTMLElement>this.armyHeader.children[0]).style.display = "";
        }
        else {
            (<HTMLElement>this.armyHeader.children[0]).style.display = "none";
        }

        // if( this.sl.pal.isSteamroller() && this.sl.pal.subLists.length < 2 ) {
        //     (<HTMLElement>this.armyHeader.children[1]).style.display = "";
        //     (<HTMLElement>this.armyHeader.children[2]).style.display = "none";
        // }
        // else if( this.sl.pal.isSteamroller() ) {
        //     (<HTMLElement>this.armyHeader.children[1]).style.display = "none";
        //     (<HTMLElement>this.armyHeader.children[2]).style.display = "";
        // }
        // else {
        //     (<HTMLElement>this.armyHeader.children[1]).style.display = "none";
        //     (<HTMLElement>this.armyHeader.children[2]).style.display = "none";
        // }
    }

    failValidation(text: string, sl: SubList, warn?: boolean): void {
        let bad: HTMLDivElement = document.createElement("div");
        bad.className = "valbar";
        let sub: HTMLDivElement = document.createElement("div");
        sub.className = warn ? "valwarn" : "valbad";
        bad.appendChild(sub);
        let tdiv: HTMLDivElement = document.createElement("div");
        tdiv.className = "valtext";

        tdiv.appendChild(document.createTextNode(text));
        bad.appendChild(tdiv);

        this.validationNode.appendChild(bad);

        DivBuilder.adjustText(tdiv, 310, 14);
    }

    validate(rules : Rules) {
        while (this.validationNode.hasChildNodes()) {
            this.validationNode.removeChild(this.validationNode.lastChild);
        }

        let slv : SubListView = this;

        this.sl.validate((function() {
            let myThis : SubListView = slv;

            return function(text: string, sl: SubList, warn? : boolean) : void {
                myThis.failValidation(text, sl, warn);
            }
        })(), rules, false);

        if (!this.validationNode.hasChildNodes()) {
            let good: HTMLDivElement = document.createElement("div");
            good.className = "valbar";
            let sub: HTMLDivElement = document.createElement("div");
            sub.className = "valgood";
            good.appendChild(sub);

            let tdiv: HTMLDivElement = document.createElement("div");
            tdiv.className = "valtext";

            tdiv.appendChild(document.createTextNode("Army passes all validation checks"));
            good.appendChild(tdiv);


            this.validationNode.appendChild(good);
        }

    }

    constructor(sl : SubList, interactive : boolean) {
        this.sl = sl;

        this.rootNode = document.createElement("div");
        this.rootNode.className = "armyListSaveInner";
        //this.saveNode.appendChild(armyListSaveInner);

        this.armyHeader = document.createElement("div");
        this.armyHeader.className = "armyHeader";
        this.armyHeader.innerHTML = "&nbsp;";

        this.themeTitle = document.createElement("div");
        this.themeTitle.className = "themeTitle";
        //this.themeTitle.innerHTML = "&nbsp;";
        this.themeTitleInner = document.createElement("div");
        this.themeTitle.appendChild(this.themeTitleInner);

        if( interactive ) {
            this.themeTitle.onclick = () => this.selectTheme();

            this.themeButton = new Button({
                icon: "settings",
                size: "small",
                className: "themesettings",
                click: () => this.selectTheme(),
            });

            this.rootNode.appendChild(this.themeButton.container);
        }



        this.armySize = document.createElement("div");
        this.armySize.className = "armySize";
        this.armySize.innerHTML = "&nbsp;";

        this.armyCost = document.createElement("div");
        this.armyCost.className = "armyCost";
        this.armyCost.innerHTML = "&nbsp;";


        if (this.sl.pal.interactive) {
            let div: HTMLElement = null;
            let span: HTMLElement = null;

            div = document.createElement("div");
            div.className = "listswap lo tth";
            div.style.display = "none";
            div.onclick = (function () {
                let myPal = sl.pal;

                return function (): void {
                    myPal.swapList();
                }

            })();

            span = document.createElement("span");
            span.className = "ttt";
            span.appendChild(document.createTextNode("Swap lists"));
            div.appendChild(span);
            this.armyHeader.appendChild(div);
        }



        this.rootNode.appendChild(this.armyHeader);
        this.rootNode.appendChild(this.themeTitle);
        this.rootNode.appendChild(this.armySize);
        this.rootNode.appendChild(this.armyCost);


        let div: HTMLDivElement = null;
        
        // div = document.createElement("div");
        // div.className = "sep";
        // this.rootNode.appendChild(div);


        this.themeNode = document.createElement("div");
        this.themeNode.style.display = "none";
        this.themeNode.className = "theme db";

        if (this.sl.pal.interactive) {
            this.themeNode.onclick = () => { this.clickThemeHeader(); };
        }

        this.rootNode.appendChild(this.themeNode);

        div = document.createElement("div");
        div.className = "themeName";
        //div.appendChild(document.createTextNode("Select a caster"));
        this.themeNode.appendChild(div);

        this.themeListNode = document.createElement("div");
        this.themeListNode.className = "themeList";

        this.rootNode.appendChild(this.themeListNode);

        this.themeStatus = document.createElement("div");
        this.themeStatus.className = "themeStatus";
        this.rootNode.appendChild(this.themeStatus);

        // div = document.createElement("div");
        // div.className = "sep";
        // this.rootNode.appendChild(div);

        this.validationNode = document.createElement("div");
        this.validationNode.className = "validation";

        this.rootNode.appendChild(this.validationNode);


        // div = document.createElement("div");
        // div.className = "sep";
        // this.rootNode.appendChild(div);

        this.listInner = document.createElement("div");
        this.listInner.className = "listInner";

        this.rootNode.appendChild(this.listInner);

        this.setTheme(null);
    }

    chooseThemeList(tlid: number) {
        this.themeListNode.style.display = null;
        this.sl.chooseThemeList(tlid);
    }

    selectTheme() : void {
        if( Dialog.active() ) {
            return;
        }

        let dlg: Dialog = new Dialog(null, "Select Theme", "person_add");

        this.populateThemeList(null, -1, dlg.content, true);

        dlg.show();
    }

    updateThemeList(caster: Entry, id: number): void {
        let tlist: HTMLElement = this.themeListNode;

        this.populateThemeList(caster, id, tlist);
    }

    populateThemeList(caster: Entry, id: number, tlist : HTMLElement, 
        newStyle? : boolean): void 
    {
        let listType : ListType = this.sl.pal.getListType();
        
        while (tlist.hasChildNodes())
            tlist.removeChild(tlist.lastChild);

        let div: HTMLDivElement = document.createElement("div");
        div.className = "listattach lb bh";

        div.innerHTML = "<span></span>" +
            Data._data.factions[this.sl.pal.factionID].n + " (default)";

        let slist: SubList = this.sl;

        if (this.sl.pal.interactive) {
            div.onclick = (function () {
                let myThis: SubListView = <SubListView>slist.view;
                let myNew : boolean = newStyle;
                return function () {
                    if( myNew ) {
                        if( Dialog.active() ) {
                            Dialog.active().close();
                        }
                    }
                    myThis.chooseThemeList(null);
                };
            })();
        }

        tlist.appendChild(div);

        if (id == null) {
            this.themeNode.innerHTML =

                (this.sl.pal.interactive ? "<div>&#x25b7</div>" : "<div></div>")
                + "<div id=\"themeName\">[Theme] "
                + Data._data.factions[this.sl.pal.factionID].n + " (default)</div>";
        }


        for (let themeid in Data.themeLists) {
            if (Data.themeLists[themeid].fid == this.sl.pal.factionID
                // && (Data.themeLists[themeid].allowed.indexOf(caster.id) > -1
                //     || (Data.themeLists[themeid].allowFunc && Data.themeLists[themeid].allowFunc(caster)))
                && checkThemeAllowed(Data.themeLists[themeid], caster)
                && !Data.themeLists[themeid].forced ) {


                if( listType 
                    && listType.champions
                    && listType.season >= 8
                    && ( !Data.themeLists[themeid].adr 
                        || Data.themeLists[themeid].adr.indexOf(listType.season) == -1 )
                    ) {
                    continue;
                }


                //for (let i = 0; i < 4; i++) {
                let div: HTMLDivElement = document.createElement("div");
                div.className = "listattach lb bh";

                if (Data.themeLists[themeid].pr) {
                    //console.log(this.sl.pal.rules);

                    if( this.sl.pal.rules && this.sl.pal.rules.enforce &&
                            !this.sl.pal.rules.ignorePreRelease ){

                        if( !Data.themeLists[themeid].prd || !this.sl.pal.rules.preReleaseDate ||
                                Data.themeLists[themeid].prd > this.sl.pal.rules.preReleaseDate ) {
                                    continue;
                                }
                    }

                    div.className += " prerelease";
                }

                if (Data.themeLists[themeid].obv) {

                    if( this.sl.pal.rules && this.sl.pal.rules.listType 
                        && this.sl.pal.rules.listType.noblivion ) 
                    {
                        continue;
                    }

                    div.className += " obliviontheme";
                }
                else {
                    // Remove pre-Oblivion themes from selection
                    // Unless noblivion is specifically set
                    if( !this.sl.pal.rules || !this.sl.pal.rules.listType 
                        || !this.sl.pal.rules.listType.oblivion ) 
                    {
                        continue;
                    }
                }


                //div.innerHTML = "<span>&#x216" + i + ";</span>"
                div.innerHTML = "<span>&nbsp;</span>"
                    + Data.themeLists[themeid].n;

                let slist: SubList = this.sl;

                if (this.sl.pal.interactive) {
                    div.onclick = (function () {
                        let myID: number = parseInt(themeid);
                        let myThis: SubList = slist;
                        let myNew : boolean = newStyle;

                        return function () {
                            if( myNew ) {
                                if( Dialog.active() ) {
                                    Dialog.active().close();
                                }
                            }
                            myThis.chooseThemeList(myID);
                        };
                    })();
                }

                tlist.appendChild(div);
                //}
            }
        }
        this.themeNode.className = this.sl.pal.interactive
            ? "theme db" : "theme db bh";

        if( !newStyle ) {
            tlist.style.display = "none";
        }

        this.updateThemeStatus();
    }


    updateThemeStatus() : void {
        if( this.sl.theme ) {
            while( this.themeStatus.hasChildNodes() ) {
                this.themeStatus.removeChild(this.themeStatus.lastChild);
            }

            this.themeStatus.innerHTML = this.sl.themeFreebieText();

            this.themeStatus.style.display = "";
        }
        else {
            this.themeStatus.style.display = "none";
        }
    }


    activate(active: boolean): void {
        this.rootNode.className = active ? "armyListSaveInner" :
            "armyListSaveInner alsid";

        if (active) {
            this.themeNode.className =
                (this.sl.casters.length != 1 || !this.sl.pal.interactive)
                    ? "theme db" : "theme db bh";
        }
        else {
            this.themeListNode.style.display = "none";
            this.themeNode.className = "theme db";
        }
    }

    clickThemeHeader(): void {
        let header: HTMLElement = this.themeNode;
        let list: HTMLElement = this.themeListNode;

        if (list.style.display == "none") {
            list.style.display = "";
            header.children[0].innerHTML = "&#x25bd;";
        }
        else {
            list.style.display = "none";
            header.children[0].innerHTML = "&#x25b7;";
        }
    }

    updateHeader() : void {
        this.armyHeader.firstChild.nodeValue = this.sl.armyHeaderText(false);
        //this.themeTitle.firstChild.nodeValue = 
        while( this.themeTitleInner.hasChildNodes() ) {
            this.themeTitleInner.removeChild(this.themeTitleInner.lastChild);
        }
        this.themeTitleInner.appendChild(document.createTextNode(
            this.sl.inTheme() 
                ? this.sl.theme.name()
                : "No Theme"));

        DivBuilder.adjustText(this.themeTitleInner, 254, 12);

        //this.armyCost.firstChild.nodeValue = "" + this.sl.armyCost() + " /";
        this.armyCost.firstChild.nodeValue = "";
        //this.armySize.firstChild.nodeValue = "" + this.sl.pal.getListSize();
        this.armySize.firstChild.nodeValue = "" + this.sl.armyCost();
    }

    clearList() : void {
        let listdiv: HTMLElement = this.listInner;

        while (listdiv.hasChildNodes())
            listdiv.removeChild(listdiv.lastChild);
    }

    setTheme(tl: ThemeData) : void {
        let header: HTMLElement = this.themeNode;
        let list: HTMLElement = this.themeListNode;

        list.style.display = "none";

        if (tl == null) {
            header.innerHTML =
                (this.sl.pal.interactive ? "<div>&#x25b7;</div>" : "<div></div>")
                + "<div id=\"themeName\">[Theme] "
                + Data._data.factions[this.sl.pal.factionID].n + " (default)</div>";
        }
        else {
            header.innerHTML =
                (this.sl.pal.interactive ? "<div>&#x25b7;</div>" : "<div></div>")
                + "<div id=\"themeName\">[Theme] " + tl.n + "</div>";
        }
    }


}



